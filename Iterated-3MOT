import itertools, math 
import re 

################################################################
# Data input format (.txt) = format used by preflib.org #
# Each line has the form p: c1, c2, c3, ... where p is the number of votes with ranking c1 > c2 > c3 > ...
# Voting profile example 
# 11: 4,5
# 9: 5,4,2,3,1
# Must enter 'file name.txt' to line 27 # 
################################################################

################################################################
# For real-world data source : www.preflib.org # 
# the data (txt file) is obtained from www.preflib.org by removing the all preamble in each dataset # 
# enter 'file name.txt' to line 27 # 
################################################################  


################################################################ 
# n = numbers of alternatives, repeat = number of iterations #
n = 5

################################################################ 
# election input # 

with open('2010 UK Labor Leadership.txt') as f: 
    lines = [line.rstrip() for line in f]
# k = number of distinct rankings # 
k = len(lines)
# coeff = list of number of votes for each ranking in the list ranking # 
coeff = [0 for i in range(k)]
# all unranked alternatives in a vote equally occupy the last position, i.e., n-th position # 
ranking = [[n for m in range(n)] for i in range (k)]
for i in range(k):
    L = lines[i].split(': ',1)
    coeff[i] = int(L[0])
    r = [int(j) for j in L[1].split(',')]
    for m in range(len(r)):
        ranking[i][r[m]-1] = m + 1

################################################################ 
# computation of delta, Q # 
delta = [[0 for x in range(n)] for y in range (n)]
P = [[[0 for x in range(n)] for y in range (n)] for z in range(n)]
Q = [[[0 for x in range(n)] for y in range (n)] for z in range(n)]

for x, y in itertools.permutations(range(n), 2):
    for i in range(k):
        if ranking[i][x] < ranking[i][y]: 
            delta[x][y] += coeff[i]
        if ranking[i][x] > ranking[i][y]: 
            delta[x][y] += - coeff[i]

for x, y, z in itertools.permutations(range(n), 3):
    for i in range(k):
        u = min(ranking[i][x],ranking[i][y],ranking[i][z])
        v = max(ranking[i][x],ranking[i][y],ranking[i][z])
        
        if u != v:
            if ranking[i][x] == u:
                Q[x][y][z] += coeff[i]

            if ranking[i][y] == u:
                Q[x][y][z] += - coeff[i]
                    
                    
################################################################ 
# function transitivity closure of a list of pairs # 
# repeat n-2 times to obtain all induced pairs, e.g., (x_1,x_2),...,(x_{n-1},x_n) to have (x_1,x_n) # 
def trans_closure(U):
    for i in range(n-2):
        for x, z in itertools.permutations(range(n), 2):
            if (x,z) not in U:
                for y in range(n):
                    if (y!=x) and (y!=z): 
                        if ((x,y) in U) and ((y,z) in U):
                            U.append((x,z))

################################################################ 
# computation of the updated L, R #
def Aset(U,L):
    for x, z in itertools.permutations(range(n), 2):
        if (z,x) in L: 
            for y in range(n):
                if (y!=x) and (y!=z) and (z not in U[x][y]): 
                    if (z,y) in L: 
                        U[x][y].append(z)

def Tset(U,L):
    for x, z in itertools.permutations(range(n), 2):
        if (x,z) in L: 
            for y in range(n):
                if (y!=x) and (y!=z) and (z not in U[x][y]): 
                    if (y,z) in L: 
                        U[x][y].append(z)

################################################################ 
# computation of good pairs #
# S(y,x,z,t) = Q(y,z,t) + Q(z,x,t) # 
# P(x,y,z) = delta(x,z) + delta(z,y) + Q(x,y,z) + Q(z,y,x) #
L = [] 
A = [[[] for x in range (n)] for y in range(n)]
T = [[[] for x in range (n)] for y in range(n)]
number = -1 
i = 0 
while number < len(L):
    i += 1
    number = len(L)
    if i > 1:        
        Aset(A,L) 
        Tset(T,L) 
    for x, y in itertools.permutations(range(n), 2): 
        if (delta[x][y] > 0) and ((x,y) not in L): 
            total = 0
            good = True
            total = 0
            for z in range(n): 
                if (z!=x) and (z!=y) and (z not in A[x][y]):
                    if Q[x][y][z] < 0:
                        good = False
                        break

            if good == True:
                for z in range(n): 
                    if (z!=x) and (z!=y) and (z not in A[x][y]) and (z not in T[x][y]): 
                        partial = - (delta[x][z] + delta[z][y] + Q[x][y][z] + Q[z][y][x])

                        for t in range(n): 
                             if (t!=x) and (t!=y) and (t!=z) and (t not in A[x][y]): 
                                    partial += max(0, Q[y][z][t] + Q[z][x][t])
                        total += max(0,partial) 
                if 2*delta[x][y] > total:
                    L.append((x,y)) 
    trans_closure(L)
    print(f'{len(L)}/{int(n*(n-1)/2)} good pairs found after round {i}')


#############################################################
# Results #
print(f'No more good pairs found by Iterated 3MOT after {i-1} iterations') 
print('List of good pairs found by Iterated 3MOT after last round:') 
print(L)
