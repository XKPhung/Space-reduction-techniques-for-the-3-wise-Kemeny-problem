# Result-Uniform-Proportion-pairs-3MOTe # 
##################################################################
import itertools, math 
import re
# generate random integer values
from random import seed, randint 
# seed random number generator
seed(1)

##############################
# Parameters #
# n = numbers of alternatives > 2 # ENTER THE NUMBER OF ALTERNATIVES n AT LINE 13
n = 20
# m = numbers of votes # ENTER THE RANGE FOR THE NUMBER OF VOTES AT LINE 22 
# adjust the range in line 22 #
# repeat = number of iterations for the stats # ENTER THE NUMBER OF UNIFORM INSTANCES AT LINE 17 
repeat = 1000
# count = number of elections where 3MOT applicable # 

############################## 
for m in range(3,11):
    count = 0
    for rep in range(repeat):   
        V = []
        for i in range(m):
            S = [j for j in range(n)]
            T = []
            for k in range(n):
                T.append(S.pop(randint(0,n-k-1)))
            V.append(T)

        delta = [[0 for x in range(n)] for y in range (n)]
        P = [[[0 for x in range(n)] for y in range (n)] for z in range(n)]
        Q = [[[0 for x in range(n)] for y in range (n)] for z in range(n)]

        for x, y in itertools.permutations(range(n), 2):
            for i in range(m):
                if V[i][x] < V[i][y]: 
                    delta[x][y] += 1
                if V[i][x] > V[i][y]: 
                    delta[x][y] += - 1

        for x, y, z in itertools.permutations(range(n), 3):
            for i in range(m):
                u = min(V[i][x],V[i][y],V[i][z])
                v = max(V[i][x],V[i][y],V[i][z])

                if u != v:
                    if V[i][x] == u:
                        Q[x][y][z] += 1

                    if V[i][y] == u:
                        Q[x][y][z] += - 1

        for x, y in itertools.permutations(range(n), 2): 
            if delta[x][y] > 0: 
                good = True
                total = 0
                for z in range(n):
                    if (z!=x) and (z!=y):
                        if Q[x][y][z] < 0:
                            first_condition = False
                            break

                if good == True:
                    for z in range(n): 
                        partial = - (delta[x][z] + delta[z][y] + Q[x][y][z] + Q[z][y][x])
                        if (z!=x) and (z!=y):
                            for t in range(n):
                                 if (t!=x) and (t!=y) and (t!=z):
                                        partial += max(0, Q[y][z][t] + Q[z][x][t])
                            total += max(0,partial)
                    if 2*delta[x][y] >= total:
                        count += 1


    ##############################
    # Results # 
    print(f'(n={int(n)},m={int(m)},size={int(repeat)}), 3MOTe found {round(200*count/repeat/n/(n-1),3)}% pairs')
