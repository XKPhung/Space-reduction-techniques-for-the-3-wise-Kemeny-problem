import itertools, math 
from pulp import *

# status model.status = 1 if optimal solution found, if infeasible, model.status = -1 # 

##############################################################################
# for each n, the 3-wise 3/4-majority rule with n alternatives is satisfied 
# if and only if the function three_wise_majority_rule(n,k) is satisifed for all k = 1,...,n 
##############################################################################

def three_wise_majority_rule(n,k):

    #############################################
    # Parameters # 
    #############################################
    # n is the number of candidates n >= 2
    # k is the position of the pivot, between 1 and n 
    #############################################

    #############################################
    # Axiliary variables #
    #############################################
    # the list C of n candidates 0,1,...,n-1
    C = list(range(n))

    # the list S of all rankings: r[j] is the position of the candidate j in the ranking r
    rankings = list([*(itertools.permutations(C, n))])
    S = list(range(math.factorial(n)))
    for i in range(math.factorial(n)):
        S[i] = list(rankings[i])

    # the list I, J of the indexes of good and bad rankings (according to the 3/4-majority rule) 
    # m denotes in general the index of the ranking
    I = []
    J = []
    for m in range(math.factorial(n)):
        good = True
        for i in range(0,k-1):
            if S[m][i]>S[m][k-1]:
                good = False
                break
        for j in range(k,n):
            if S[m][j]<S[m][k-1]:
                good = False
                break
        if good == True:
            I.append(m)
        if good == False:
            J.append(m)

    # list sigma[i,j,m] = d3(S[j], S[m]) - d3(S[i], S[m]) of coefficients for constraints # 
    # list sigma of constraints: 3dist(p_j,V) <= 3dist(p_i,V) for all p_i in I.    
    sigma = {(i,j, m):0 for i in I for j in J for m in range(0,math.factorial(n))}
    for j in J:
        for i in I:
            for m in range(0, math.factorial(n)):
                pairs = itertools.combinations(range(0,n), 2)
                triples = itertools.combinations(range(0,n), 3)

                for x, y in pairs:
                    p = S[i][x] - S[i][y]
                    q = S[j][x] - S[j][y]
                    r = S[m][x] - S[m][y]
                    # if discordant 
                    if (p * r > 0) and (q * r < 0):
                        sigma[i,j,m] += 1
                    if (q * r > 0) and (p * r < 0):
                        sigma[i,j,m] += -1

                for x, y, z in triples: 
                    p = x 
                    q = x
                    r = x 
                    ## p = min (S[i][x], S[i][y], S[i][z])
                    if S[i][y] < S[i][p]:  
                        p = y 
                    if S[i][z] < S[i][p]:
                        p = z 
                    
                    ## q = min (S[j][x], S[j][y], S[j][z])
                    if S[j][y] < S[j][q]:  
                        q = y 
                    if S[j][z] < S[j][q]:
                        q = z     
                    
                    ## r = min (S[m][x], S[m][y], S[m][z])
                    if S[m][y] < S[m][r]:  
                        r = y 
                    if S[m][z] < S[m][r]:
                        r = z 

                    # if discordant  
                    if (p==r) and (q!=r): 
                        sigma[i,j,m] += 1
                    if (p!=r) and (q==r): 
                        sigma[i,j,m] += -1 

    # list gamma of coefficients for the constraints gamma[i]>=3/4 for all i != k-1
    gamma = {(i,m):0 for i in range(0,n) for m in range(0, math.factorial(n))}
    for i in range(0,k-1):
        for m in range(0, math.factorial(n)):
            if S[m][i] < S[m][k-1]:
                gamma[i,m] += +1

    for j in range(k,n): 
        for m in range(0, math.factorial(n)):
            if S[m][j] > S[m][k-1]:
                gamma[j,m] += 1

   
    ###############################################
    # LP algo #
    ###############################################
    satisfied = True
    for j in J:
    # Create the j-th problem variable to contain the problem data 

        model = LpProblem("3-wise-3-4-for-n-candidates", LpMaximize) 

        # Create variables #     
        # list c of coeffcients of each ranking in the voting profile V
        c = {i: LpVariable(name=f"c{i}", lowBound=0) for i in range(0, math.factorial(n))} 

        # Create maximize objective function # 
        model += c[0]

        # Create constraints # 
        # normalization: sum of all c[i] is 1
        model += lpSum(c[m] for m in range(0, math.factorial(n))) == 1
        
        # 3/4 constraints using gamma and c
        for i in range(0, n):
            if i != k-1:
                model += lpSum(gamma[i,m]*c[m] for m in range(0, math.factorial(n))) >= 0.75

        # constraints S[j] better than S[i] for all i in I     
        for i in I:
            model += lpSum(sigma[i,j,m]*c[m] for m in range(0, math.factorial(n))) <= 0

        # The problem is solved using PuLP's choice of Solver
        model.solve()
        if model.status == 1:
            satisfied = False
            break
            
    return satisfied


# Welcome to the CBC MILP Solver 
# Version: 2.10.3 
# Build Date: Dec 15 2019 
