# Result-Uniform-Proportion-pairs-Iterated-3MOT # 
##################################################################
import itertools, math 
import re
# generate random integer values
from random import seed, randint 
# seed random number generator
seed(1)

##############################
# Parameters #
# n = numbers of alternatives > 2 # ENTER THE NUMBER OF ALTERNATIVES n AT LINE 13
n = 10
# m = numbers of votes # ENTER THE RANGE FOR THE NUMBER OF VOTES m AT LINE 52 
# adjust the range in line 22 #
# repeat = number of iterations for the stats # ENTER THE NUMBER OF UNIFORM INSTANCES AT LINE 17 
repeat = 1000
# count = number of elections where 3MOT applicable #

##############################
# function transitivity closure of a list of pairs # 
# repeat n-2 times to obtain all induced pairs, e.g., (x_1,x_2),...,(x_{n-1},x_n) to have (x_1,x_n) # 
def trans_closure(U):
    for i in range(n-2):
        for x, z in itertools.permutations(range(n), 2):
            if (x,z) not in U:
                for y in range(n):
                    if (y!=x) and (y!=z): 
                        if ((x,y) in U) and ((y,z) in U):
                            U.append((x,z))

##############################
# computation of the updated A, T #
def Aset(U,L):
    for x, z in itertools.permutations(range(n), 2):
        if (z,x) in L: 
            for y in range(n):
                if (y!=x) and (y!=z) and (z not in U[x][y]): 
                    if (z,y) in L: 
                        U[x][y].append(z)

def Tset(U,L):
    for x, z in itertools.permutations(range(n), 2):
        if (x,z) in L: 
            for y in range(n):
                if (y!=x) and (y!=z) and (z not in U[x][y]): 
                    if (y,z) in L: 
                        U[x][y].append(z)


############################## 
for m in range(15,16):
    ##############################
    # computation of good pairs #
    # S(y,x,z,t) = Q(y,z,t) + Q(z,x,t) # 
    # P(x,y,z) = delta(x,z) + delta(z,y) + Q(x,y,z) + Q(z,y,x) #
    count = 0
    for rep in range(repeat): 
        V = []
        for i in range(m):
            H = [j for j in range(n)]
            K = []
            for k in range(n):
                K.append(H.pop(randint(0,n-k-1)))
            V.append(K)

        delta = [[0 for x in range(n)] for y in range (n)]
        P = [[[0 for x in range(n)] for y in range (n)] for z in range(n)]
        Q = [[[0 for x in range(n)] for y in range (n)] for z in range(n)]

        for x, y in itertools.permutations(range(n), 2):
            for i in range(m):
                if V[i][x] < V[i][y]: 
                    delta[x][y] += 1
                if V[i][x] > V[i][y]: 
                    delta[x][y] += - 1

        for x, y, z in itertools.permutations(range(n), 3):
            for i in range(m):
                u = min(V[i][x],V[i][y],V[i][z])
                v = max(V[i][x],V[i][y],V[i][z])

                if u != v:
                    if V[i][x] == u:
                        Q[x][y][z] += 1

                    if V[i][y] == u:
                        Q[x][y][z] += - 1


        A = [[[] for x in range (n)] for y in range(n)]
        T = [[[] for x in range (n)] for y in range(n)]
        number = -1 
        i = 0 
        L = [] 
        while number < len(L):
            i += 1
            number = len(L)
            if i > 1:        
                Aset(A,L) 
                Tset(T,L) 
            for x, y in itertools.permutations(range(n), 2): 
                if (delta[x][y] > 0) and ((x,y) not in L): 
                    total = 0
                    good = True
                    total = 0
                    for z in range(n): 
                        if (z!=x) and (z!=y) and (z not in A[x][y]):
                            if Q[x][y][z] < 0:
                                good = False
                                break

                    if good == True:
                        for z in range(n): 
                            if (z!=x) and (z!=y) and (z not in A[x][y]) and (z not in T[x][y]): 
                                partial = - (delta[x][z] + delta[z][y] + Q[x][y][z] + Q[z][y][x])

                                for t in range(n): 
                                     if (t!=x) and (t!=y) and (t!=z) and (t not in A[x][y]): 
                                            partial += max(0, Q[y][z][t] + Q[z][x][t])
                                total += max(0,partial) 
                        if 2*delta[x][y] > total:
                            L.append((x,y)) 
            trans_closure(L)
        count += len(L)

    ##############################
    # Results # 
    print(f'(n={int(n)},m={int(m)},size={int(repeat)}), Iterated 3MOT found {round(100*count/(repeat*n*(n-1)/2),3)}% pairs')
